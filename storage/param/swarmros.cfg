#
# Configure endpoint
#
endpoint = {
    name = "turtle"         # Possibly non-unique name for the local node
    deviceClass = "turtle"  # Discoverable device class
    type = "zyre"           # Endpoint type
    parameters = {          # Endpoint parameters, which for Zyre endpoints can be:
        # ifname = "eth0"       # Network interface to bind to
        # port = 34000          # Port to use for UDP beacons
    }
}

#
# Configure bridged services
#
services = {

    #
    # Telemetry topics
    # 
    # The bridge will subscribe to these topics and forward
    # their latest value to telemetry subscribers.
    #
    #  - source:  the ROS topic that provides the value
    #             for the property - preferably latched
    #  - message: fully qualified name of the underlying
    #             ROS message type
    #  - name:    the discoverable name of the topic
    #  - status:  whether to include the value of this 
    #             property in the status broadcast
    #
    telemetryTopics = (
        {
            source = "mavros/global_position/global",
            message = "sensor_msgs/NavSatFix",
            name = "position",
            status = true
        },
        {
            source = "move_base/current_goal", 
            message = "geometry_msgs/PoseStamped",
            name = "currentgoal",
            status = false
        },
        {
            source = "cmd_vel", 
            message = "geometry_msgs/Twist",
            name = "velocity",
            status = true
        },
        {
            source = "amcl_pose", 
            message = "geometry_msgs/PoseWithCovarianceStamped",
            name = "pose",
            status = true
        
        }
#        {
#            source = "mavros/battery", 
#            message = "sensor_msgs/BatteryState",
#            name = "batteryState",
#            status = false
#        }
    )

    #
    # Outgoing events
    #
    # The bridge will subscribe to these topics and forward
    # received messages as events to the swarm.
    #
    #  - message: fully qualified name of the underlying
    #             ROS message type (must have a field named
    #             header with message type swarmros/EventHeader)
    #  - source:  ROS topic to forward events from
    #
    outgoingEvents = (
        {
            message = "cpswarm_msgs/TargetPositionEvent",
            source = "target_found"
        },
        {
            message = "cpswarm_msgs/TargetPositionEvent",
            source = "target_lost"
        },
        {
            message = "cpswarm_msgs/TargetPositionEvent",
            source = "target_update"
        },
        {
            message = "cpswarm_msgs/TargetPositionEvent",
            source = "target_done"
        },
        {
            message = "cpswarm_msgs/TaskAllocationEvent",
            source = "cps_selection"
        },
        {
            message = "cpswarm_msgs/TaskAllocatedEvent",
            source = "cps_selected"
        },
        {
            message = "cpswarm_msgs/Position",
            source = "position"
        },
        {
            message = "cpswarm_msgs/Velocity",
            source = "velocity"
        },
        {
            message = "cpswarm_msgs/CartKnownEvent",
            source = "cart_known"
        },
        {
            message = "cpswarm_msgs/NewCartEvent",
            source = "new_cart"
        },
        {
            message = "cpswarm_msgs/NewPlacePose",
            source = "monitoring_tool_control"
        },
        {
            message = "cpswarm_msgs/CurrentState",
            source = "current_state"
        },
        {
            message = "cpswarm_msgs/CurrentState",
            source = "monitoring_control_event"
        },
        {
            message = "cpswarm_msgs/AreaModificationEvent",
            source = "new_area"
        }
    )

    #
    # Incoming events
    #
    # The bridge will listen to these events and republish
    # them under ROS topics.
    #
    # NOTE: Only one handler per event name can be added. If
    #       desired, handlers with the same message type can
    #       republish to the same topic.
    #
    #  - suffix:  will be published under events/<suffix>
    #  - message: fully qualified name of the underlying
    #             ROS message type (must have a field named
    #             header with message type swarmros/EventHeader)
    #  - name:    discoverable event name
    #
    incomingEvents = (
    	{
            suffix = "launch",
            message = "swarmros/SimpleEvent",
            name = "launch"
        },
        {
            suffix = "mission_start",
            message = "swarmros/SimpleEvent",
            name = "missionStart"
        },
        {
            suffix = "mission_abort",
            message = "swarmros/SimpleEvent",
            name = "missionAbort"
        },
        {
            suffix = "cps_selection",
            message = "cpswarm_msgs/TaskAllocationEvent",
            name = "cps_selection"
        },
        {
            suffix = "cps_selected",
            message = "cpswarm_msgs/TaskAllocatedEvent",
            name = "cps_selected"
        },
        {
            suffix = "target_found",
            message = "cpswarm_msgs/TargetPositionEvent",
            name = "target_found"
        },
        {
            suffix = "target_lost",
            message = "cpswarm_msgs/TargetPositionEvent",
            name = "target_lost"
        },
        {
            suffix = "target_update",
            message = "cpswarm_msgs/TargetPositionEvent",
            name = "target_update"
        },
        {
            suffix = "target_done",
            message = "cpswarm_msgs/TargetPositionEvent",
            name = "target_done"
        },
        {
            suffix = "position",
            message = "cpswarm_msgs/Position",
            name = "position"
        },
        {
            suffix = "velocity",
            message = "cpswarm_msgs/Velocity",
            name = "velocity"
        },
        {
            suffix = "cart_known",
            message = "cpswarm_msgs/CartKnownEvent",
            name = "cart_known"
        },
        {
            suffix = "new_cart",
            message = "cpswarm_msgs/NewCartEvent",
            name = "new_cart"
        },
        {
            suffix = "new_place_pose"
            message = "cpswarm_msgs/NewPlacePose",
            name = "new_place_pose"
        },
        {
            suffix = "current_state"
            message = "cpswarm_msgs/CurrentState",
            name = "current_state"
        },
        {
            suffix = "monitoring_control_event"
            message = "cpswarm_msgs/CurrentState",
            name = "monitoring_control_event"
        },
        {
            suffix = "new_area"
            message = "cpswarm_msgs/AreaModificationEvent",
            name = "new_area"
        }
    )

    #
    # Published parameters
    #
    # The bridge will load the value of these parameters from
    # the ROS Parameter Server, then publish them both as
    # ROS topics and as remotely available key-value targets.
    #
    # NOTE: Both suffixes and parameter names must be unique. If
    #       desired, two parameter publishers can reference the 
    #       same ROS parameter path. Parameters must have a valid 
    #       value before the bridge is started.
    #
    #  - suffix:  will be published under parameters/<suffix>
    #  - message: fully qualified name of the underlying
    #             ROS message type (can by any type)
    #  - name:    discoverable key-value path
    #  - path:    ROS parameter path
    #  - rw:      whether set requests are accepted
    #
    publishedParameters = (
    #    {
    #        suffix = "reportInterval",
    #        message = "swarmros/UInt",
    #        name = "reportInterval",
    #        path = "example/reportInterval",
    #        rw = true
    #    }
    )

    #
    # Bridged parameters
    #
    # The bridge will load the value of these parameters from
    # the ROS Parameter Server, then publish them as remotely
    # available key-value targets.
    #
    # NOTE: Parameter names must be unique. If desired, two
    #       parameter publishers can reference the same ROS
    #       parameter path. Parameters must have a valid 
    #       value before the bridge is started.
    #
    #  - name:    discoverable key-value path
    #  - path:    ROS parameter path
    #  - rw:      whether set requests are accepted
    #
    bridgedParameters = (
    #    {
    #        name = "exampleBridgedParameter",
    #        path = "example/exampleBridgedParameter",
    #        rw = true
    #    }
    )

}
